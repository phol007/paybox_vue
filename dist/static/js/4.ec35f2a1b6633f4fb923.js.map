{"version":3,"sources":["webpack:///static/js/4.ec35f2a1b6633f4fb923.js","webpack:///./src/components/setting.vue","webpack:///./~/numeral/numeral.js?9e7e*","webpack:///./src/js/setting.js","webpack:///./src/assets/cash-icon.png","webpack:///./src/components/setting.vue?9b77"],"names":["webpackJsonp","145","module","exports","__webpack_require__","Component","180","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","global","factory","undefined","call","this","Numeral","input","number","_input","_value","numeral","_","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","length","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","format","roundingFunction","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","leadingCount","abbr","decimal","neg","Math","includes","indexOf","RegExp","abbreviations","trillion","billion","million","thousand","toString","split","toFixed","delimiters","slice","String","i","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","start","reduce","array","callback","TypeError","t","Object","len","k","arguments","multiplier","x","parts","correctionFactor","Array","prototype","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","key","toLowerCase","localeData","Error","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","cback","curr","currI","O","corrFactor","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","binary","allSuffixes","concat","filter","item","unformatRegex","bytes","suffix","bytesMultiplier","symbols","before","after","exponential","toExponential","hours","floor","minutes","seconds","timeArray","188","__webpack_exports__","defineProperty","__WEBPACK_IMPORTED_MODULE_0_numeral__","n","data","titlePage","beforeDestroy","sockets","methods","goto","path","stopSound","Soundclick","$router","push","backHome","document","getElementById","play","currentTime","189","p","283","render","_vm","_h","$createElement","_c","_self","staticClass","on","click","_m","_v","staticStyle","font-size","_s","$event","attrs","src","staticRenderFns"],"mappings":"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","file":"static/js/4.ec35f2a1b6633f4fb923.js","sourcesContent":["webpackJsonp([4],{\n\n/***/ 145:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(125)(\n  /* script */\n  __webpack_require__(188),\n  /* template */\n  __webpack_require__(283),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 180:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n\n\n/***/ }),\n\n/***/ 188:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_numeral__ = __webpack_require__(180);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_numeral___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_numeral__);\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n\tname: 'setting',\n\tdata: function data() {\n\t\treturn {\n\t\t\ttitlePage: 'Setting Paybox'\n\t\t};\n\t},\n\tbeforeDestroy: function beforeDestroy() {\n\t\treturn {\n\t\t\tsockets: null\n\t\t};\n\t},\n\n\tmethods: {\n\t\tgoto: function goto(path) {\n\t\t\tthis.stopSound();\n\t\t\tthis.Soundclick();\n\t\t\tthis.$router.push(path);\n\t\t},\n\t\tbackHome: function backHome() {\n\t\t\tthis.$router.push('/');\n\t\t},\n\t\tSoundclick: function Soundclick() {\n\t\t\tvar audio = document.getElementById(\"audio\");\n\t\t\taudio.play();\n\t\t},\n\t\tstopSound: function stopSound() {\n\t\t\tvar audio = document.getElementById(\"audio\");\n\t\t\taudio.currentTime = 0;\n\t\t}\n\t}\n});\n\n/***/ }),\n\n/***/ 189:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"static/img/cash-icon.2db1034.png\";\n\n/***/ }),\n\n/***/ 283:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"setting\"\n  }, [_c('button', {\n    staticClass: \"back\",\n    on: {\n      \"click\": _vm.backHome\n    }\n  }, [_vm._m(0)]), _vm._v(\" \"), _c('div', {\n    staticClass: \"container\"\n  }, [_c('h1', {\n    staticStyle: {\n      \"font-size\": \"50px\"\n    }\n  }, [_vm._v(\" \" + _vm._s(_vm.titlePage))]), _vm._v(\" \"), _c('button', {\n    staticClass: \"bt_menu\",\n    on: {\n      \"click\": function($event) {\n        _vm.goto('addMoney')\n      }\n    }\n  }, [_c('img', {\n    attrs: {\n      \"src\": __webpack_require__(189)\n    }\n  }), _vm._v(\" \"), _c('h1', [_vm._v(\"เติมเงิน\")])])])])\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('span', {\n    staticClass: \"icon icon is-large\"\n  }, [_c('i', {\n    staticClass: \"fa fa-arrow-left\"\n  })])\n}]}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/4.ec35f2a1b6633f4fb923.js","var Component = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../js/setting.js\"),\n  /* template */\n  require(\"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4aee70ee\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./setting.vue\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/setting.vue\n// module id = 145\n// module chunks = 4","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/numeral/numeral.js\n// module id = 180\n// module chunks = 2 3 4","import numeral from 'numeral'\n\nexport default {\n\tname: 'setting',\n\tdata () {\n\t\treturn {\n\t\t\ttitlePage: 'Setting Paybox'\n\t\t}\n\t},\n\tbeforeDestroy () {\n\t  return {\n\t    sockets: null\n\t  }\n\t},\n\tmethods: {\n\t\tgoto (path) {\n\t\t\tthis.stopSound()\n\t\t\tthis.Soundclick()\n\t\t\tthis.$router.push(path)\n\t\t},\n\t\tbackHome () {\n\t\t\tthis.$router.push('/')\n\t\t},\n\t\tSoundclick () {\n\t\t\tvar audio = document.getElementById(\"audio\")\n       \t\taudio.play()\n\t\t},\n\t    stopSound () {\n\t      var audio = document.getElementById(\"audio\")\n\t          audio.currentTime = 0\n\t    }\n\t}\n}\n\n\n// WEBPACK FOOTER //\n// ./src/js/setting.js","module.exports = __webpack_public_path__ + \"static/img/cash-icon.2db1034.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assets/cash-icon.png\n// module id = 189\n// module chunks = 4","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"setting\"\n  }, [_c('button', {\n    staticClass: \"back\",\n    on: {\n      \"click\": _vm.backHome\n    }\n  }, [_vm._m(0)]), _vm._v(\" \"), _c('div', {\n    staticClass: \"container\"\n  }, [_c('h1', {\n    staticStyle: {\n      \"font-size\": \"50px\"\n    }\n  }, [_vm._v(\" \" + _vm._s(_vm.titlePage))]), _vm._v(\" \"), _c('button', {\n    staticClass: \"bt_menu\",\n    on: {\n      \"click\": function($event) {\n        _vm.goto('addMoney')\n      }\n    }\n  }, [_c('img', {\n    attrs: {\n      \"src\": require(\"../assets/cash-icon.png\")\n    }\n  }), _vm._v(\" \"), _c('h1', [_vm._v(\"เติมเงิน\")])])])])\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('span', {\n    staticClass: \"icon icon is-large\"\n  }, [_c('i', {\n    staticClass: \"fa fa-arrow-left\"\n  })])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-4aee70ee\",\"hasScoped\":false,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/setting.vue\n// module id = 283\n// module chunks = 4"],"sourceRoot":""}